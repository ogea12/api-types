/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/auth/ping": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Lance un ping pour vérifier la disponibilité des services. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Ping"];
                406: components["responses"]["NotAcceptable"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Génère un jeton d'accès valide pendant un jour.
         *
         *     Dans le cas des utilisateurs disposant de la double authentification, un jeton de double authentification valide pendant une minute est fourni, afin de l'utiliser par la suite pour générer un jeton d'accès.
         *
         *     | **CODE HTTP** | **DESCRIPTION** |
         *     |--|--|
         *     | `201` - **Created** | Authentification sans double authentification. |
         *     | `202` - **Accepted** | Authentification avec double authentification. | */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Auth"];
            responses: {
                201: components["responses"]["Token"];
                202: components["responses"]["Token"];
                400: components["responses"]["BadRequest"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/token-gerermesaffaires": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère un jeton d'accès [GererMesAffaires](https://www.gerermesaffaires.com) valide.
         *
         *     Cette action utilise le cookie `gerermesaffaires-session`, il faut donc préalablement s'authentifier avec `POST /v1/auth/token-gerermesaffaires`. Vous pouvez consulter la [documentation de GererMesAffaires](https://swagger.gerermesaffaires.com) pour découvrir les opérations possibles. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["TokenGererMesAffaires"];
                400: components["responses"]["BadRequest"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Génère un jeton d'accès valide pendant un jour (via [GererMesAffaires](https://www.gerermesaffaires.com)). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["AuthGererMesAffaires"];
            responses: {
                201: components["responses"]["Token"];
                400: components["responses"]["BadRequest"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/token-totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Génère un jeton d'accès valide pendant un jour (via MFA). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["DoubleAuth"];
            responses: {
                201: components["responses"]["Token"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/base/civilites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère toutes les civilités. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["CiviliteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une civilité. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Civilite"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/base/civilites/{IdCivilite}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant de la civilité à manipuler. */
                IdCivilite: components["parameters"]["IdCivilite"];
            };
            cookie?: never;
        };
        /** @description Récupère une civilité. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant de la civilité à manipuler. */
                    IdCivilite: components["parameters"]["IdCivilite"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Civilite"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une civilité. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant de la civilité à manipuler. */
                    IdCivilite: components["parameters"]["IdCivilite"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une civilité. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant de la civilité à manipuler. */
                    IdCivilite: components["parameters"]["IdCivilite"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Civilite"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/base/statuts-juridiques": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère tous les statuts juridiques. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["StatutJuridiqueArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un statut juridique. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["StatutJuridique"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/base/statuts-juridiques/{IdStatutJuridique}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du statut juridique à manipuler. */
                IdStatutJuridique: components["parameters"]["IdStatutJuridique"];
            };
            cookie?: never;
        };
        /** @description Récupère un statut juridique. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du statut juridique à manipuler. */
                    IdStatutJuridique: components["parameters"]["IdStatutJuridique"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["StatutJuridique"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un statut juridique. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du statut juridique à manipuler. */
                    IdStatutJuridique: components["parameters"]["IdStatutJuridique"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un statut juridique. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du statut juridique à manipuler. */
                    IdStatutJuridique: components["parameters"]["IdStatutJuridique"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["StatutJuridique"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/base/utilisateur": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère l'utilisateur connecté. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Utilisateur"];
                401: components["responses"]["Unauthorized"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Modifie l'utilisateur connecté. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Utilisateur"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/base/utilisateur/totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère la double authentification (MFA) pour l'utilisateur connecté. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Un ensemble de paramètres */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /**
                             * Format: byte
                             * @description Le code à scanner encodé en **base64**.
                             */
                            QrCode?: string;
                            /** @description La phrase secrète. */
                            Secret?: string;
                        };
                    };
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        /** @description Configure la double authentification (MFA) pour l'utilisateur connecté. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["DoubleAuth"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Désactive la double authentification (MFA) pour l'utilisateur connecté. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["DoubleAuth"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/base/utilisateur/dossiers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère tous les dossiers pour l'utilisateur connecté. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["DossierArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/base/utilisateur/dossiers/{IdDossier}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère un dossier pour l'utilisateur connecté. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Dossier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/base/utilisateur/dossiers/{IdDossier}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les contacts pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ContactArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un contact pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Contact"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/base/utilisateur/dossiers/{IdDossier}/contacts/{IdContact}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du contact à manipuler. */
                IdContact: components["parameters"]["IdContact"];
            };
            cookie?: never;
        };
        /** @description Récupère un contact pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Contact"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un contact pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un contact pour un dossier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Contact"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/base/utilisateur/dossiers/{IdDossier}/contacts/{IdContact}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du contact à manipuler. */
                IdContact: components["parameters"]["IdContact"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un contact pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/base/utilisateur/groupes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère tous les groupes pour l'utilisateur connecté. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["GroupeArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/base/utilisateur/groupes/{IdGroupe}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du groupe à manipuler. */
                IdGroupe: components["parameters"]["IdGroupe"];
            };
            cookie?: never;
        };
        /** @description Récupère un groupe pour l'utilisateur connecté. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du groupe à manipuler. */
                    IdGroupe: components["parameters"]["IdGroupe"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Groupe"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/tva": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère toutes les TVA. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["TvaArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une TVA. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Tva"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/tva/{IdTva}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant de la TVA à manipuler. */
                IdTva: components["parameters"]["IdTva"];
            };
            cookie?: never;
        };
        /** @description Récupère une TVA. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant de la TVA à manipuler. */
                    IdTva: components["parameters"]["IdTva"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Tva"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une TVA. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant de la TVA à manipuler. */
                    IdTva: components["parameters"]["IdTva"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une TVA. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant de la TVA à manipuler. */
                    IdTva: components["parameters"]["IdTva"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Tva"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les devis pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["DevisAvecClientArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        /** @description Récupère un devis pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["DevisAvecClient"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs devis pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        /** @description Télécharge un devis pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un devis pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/duplique-factures-commerciales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un devis en facture commerciale pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un devis (tenant dossier). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneDevisArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/lignes/{IdLigneDevis}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de la ligne de devis à manipuler. */
                IdLigneDevis: components["parameters"]["IdLigneDevis"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un devis (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de la ligne de devis à manipuler. */
                    IdLigneDevis: components["parameters"]["IdLigneDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneDevis"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/acomptes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les acomptes pour un devis (tenant dossier). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/acomptes/{IdAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère un acompte pour un devis (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Acompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/acomptes/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs acomptes pour un devis (tenant dossier). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/acomptes/{IdAcompte}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Télécharge un acompte pour un devis (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/acomptes/{IdAcompte}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un acompte (tenant dossier et devis). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/devis/{IdDevis}/acomptes/{IdAcompte}/lignes/{IdLigneAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
                /** @description L'identifiant de la ligne d'acompte à manipuler. */
                IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un acompte (tenant dossier et devis). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les factures commerciales pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FactureCommercialeAvecClientArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère une facture commerciale pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FactureCommercialeAvecClient"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs factures commerciales pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Télécharge une facture commerciale pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une facture commerciale pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/duplique-acomptes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une facture commerciale en acompte pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/duplique-avoirs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une facture commerciale en avoir pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/duplique-devis": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une facture commerciale en devis pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/bloque": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        /** @description Bloque une facture commerciale pour un dossier. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour une facture commerciale (tenant dossier). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneFactureCommercialeArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/lignes/{IdLigneFactureCommerciale}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de la ligne de facture commerciale à manipuler. */
                IdLigneFactureCommerciale: components["parameters"]["IdLigneFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour une facture commerciale (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de la ligne de facture commerciale à manipuler. */
                    IdLigneFactureCommerciale: components["parameters"]["IdLigneFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneFactureCommerciale"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/acomptes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les acomptes pour une facture commerciale (tenant dossier). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/acomptes/{IdAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère un acompte pour une facture commerciale (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Acompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/acomptes/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs acomptes pour une facture commerciale (tenant dossier). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/acomptes/{IdAcompte}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Télécharge un acompte pour une facture commerciale (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/acomptes/{IdAcompte}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un acompte (tenant dossier et facture commerciale). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/acomptes/{IdAcompte}/lignes/{IdLigneAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
                /** @description L'identifiant de la ligne d'acompte à manipuler. */
                IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un acompte (tenant dossier et facture commerciale). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/avoirs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les avoirs pour une facture commerciale (tenant dossier). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AvoirArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/avoirs/{IdAvoir}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère un avoir pour une facture commerciale (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Avoir"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/avoirs/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs avoirs pour une facture commerciale (tenant dossier). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/avoirs/{IdAvoir}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Télécharge un avoir pour une facture commerciale (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/avoirs/{IdAvoir}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un avoir (tenant dossier et facture commerciale). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAvoirArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/factures-commerciales/{IdFactureCommerciale}/avoirs/{IdAvoir}/lignes/{IdLigneAvoir}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
                /** @description L'identifiant de la ligne d'avoir à manipuler. */
                IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un avoir (tenant dossier et facture commerciale). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                    /** @description L'identifiant de la ligne d'avoir à manipuler. */
                    IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAvoir"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/acomptes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les acomptes pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AcompteAvecClientArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/acomptes/{IdAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère un acompte pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AcompteAvecClient"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/acomptes/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs acomptes pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/acomptes/{IdAcompte}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Télécharge un acompte pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/acomptes/{IdAcompte}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un acompte pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/acomptes/{IdAcompte}/duplique-factures-commerciales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un acompte en facture commerciale pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/acomptes/{IdAcompte}/bloque": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        get?: never;
        /** @description Bloque un acompte pour un dossier. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/acomptes/{IdAcompte}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un acompte (tenant dossier). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/acomptes/{IdAcompte}/lignes/{IdLigneAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
                /** @description L'identifiant de la ligne d'acompte à manipuler. */
                IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un acompte (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/avoirs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les avoirs pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AvoirAvecClientArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/avoirs/{IdAvoir}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère un avoir pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AvoirAvecClient"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/avoirs/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs avoirs pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/avoirs/{IdAvoir}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Télécharge un avoir pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/avoirs/{IdAvoir}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un avoir pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/avoirs/{IdAvoir}/duplique-factures-commerciales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un avoir en facture commerciale pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/avoirs/{IdAvoir}/bloque": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        get?: never;
        /** @description Bloque un avoir pour un dossier. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/avoirs/{IdAvoir}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un avoir (tenant dossier). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAvoirArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/avoirs/{IdAvoir}/lignes/{IdLigneAvoir}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
                /** @description L'identifiant de la ligne d'avoir à manipuler. */
                IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un avoir (tenant dossier). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                    /** @description L'identifiant de la ligne d'avoir à manipuler. */
                    IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAvoir"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les clients pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                    /** @description L'expression à rechercher. */
                    Query?: components["parameters"]["Query"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ClientArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        /** @description Récupère un client pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Client"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un client pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un client pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients-moraux": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les clients moraux pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ClientMoralArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un client moral pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ClientMoral"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients-moraux/{IdClientMoral}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client moral à manipuler. */
                IdClientMoral: components["parameters"]["IdClientMoral"];
            };
            cookie?: never;
        };
        /** @description Récupère un client moral pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ClientMoral"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un client moral pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un client moral pour un dossier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ClientMoral"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients-moraux/{IdClientMoral}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client moral à manipuler. */
                IdClientMoral: components["parameters"]["IdClientMoral"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un client moral pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients-moraux/{IdClientMoral}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client moral à manipuler. */
                IdClientMoral: components["parameters"]["IdClientMoral"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les contacts pour un client moral. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ContactArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un contact pour un client moral. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Contact"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients-moraux/{IdClientMoral}/contacts/{IdContact}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client moral à manipuler. */
                IdClientMoral: components["parameters"]["IdClientMoral"];
                /** @description L'identifiant du contact à manipuler. */
                IdContact: components["parameters"]["IdContact"];
            };
            cookie?: never;
        };
        /** @description Récupère un contact pour un client moral. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Contact"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un contact pour un client moral. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un contact pour un client moral. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Contact"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients-moraux/{IdClientMoral}/contacts/{IdContact}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client moral à manipuler. */
                IdClientMoral: components["parameters"]["IdClientMoral"];
                /** @description L'identifiant du contact à manipuler. */
                IdContact: components["parameters"]["IdContact"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un contact pour un client moral. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client moral à manipuler. */
                    IdClientMoral: components["parameters"]["IdClientMoral"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients-physiques": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les clients physiques pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ClientPhysiqueArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un client physique pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ClientPhysique"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients-physiques/{IdClientPhysique}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client physique à manipuler. */
                IdClientPhysique: components["parameters"]["IdClientPhysique"];
            };
            cookie?: never;
        };
        /** @description Récupère un client physique pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client physique à manipuler. */
                    IdClientPhysique: components["parameters"]["IdClientPhysique"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ClientPhysique"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un client physique pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client physique à manipuler. */
                    IdClientPhysique: components["parameters"]["IdClientPhysique"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un client physique pour un dossier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client physique à manipuler. */
                    IdClientPhysique: components["parameters"]["IdClientPhysique"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ClientPhysique"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients-physiques/{IdClientPhysique}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client physique à manipuler. */
                IdClientPhysique: components["parameters"]["IdClientPhysique"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un client physique pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client physique à manipuler. */
                    IdClientPhysique: components["parameters"]["IdClientPhysique"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les devis pour un client. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["DevisArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un devis pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Devis"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        /** @description Récupère un devis pour un client. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Devis"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un devis pour un client. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un devis pour un client. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Devis"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs devis pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        /** @description Télécharge un devis pour un client. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un devis pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/duplique-factures-commerciales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un devis en facture commerciale pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/transforme-factures-commerciales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Transforme un devis en facture commerciale pour un client.
         *
         *     💡 Les potentiels acomptes associés au devis sont dupliqués. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un devis (tenant client). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneDevisArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une ligne pour un devis (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneDevis"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/lignes/{IdLigneDevis}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de la ligne de devis à manipuler. */
                IdLigneDevis: components["parameters"]["IdLigneDevis"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un devis (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de la ligne de devis à manipuler. */
                    IdLigneDevis: components["parameters"]["IdLigneDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneDevis"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une ligne pour un devis (tenant client). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de la ligne de devis à manipuler. */
                    IdLigneDevis: components["parameters"]["IdLigneDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une ligne pour un devis (tenant client). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de la ligne de devis à manipuler. */
                    IdLigneDevis: components["parameters"]["IdLigneDevis"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneDevis"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/lignes/{IdLigneDevis}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de la ligne de devis à manipuler. */
                IdLigneDevis: components["parameters"]["IdLigneDevis"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une ligne pour un devis (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de la ligne de devis à manipuler. */
                    IdLigneDevis: components["parameters"]["IdLigneDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/acomptes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les acomptes pour un devis (tenant client). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un acompte pour un devis (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Acompte"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/acomptes/{IdAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère un acompte pour un devis (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Acompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un acompte pour un devis (tenant client). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un acompte pour un devis (tenant client). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Acompte"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/acomptes/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs acomptes pour un devis (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/acomptes/{IdAcompte}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Télécharge un acompte pour un devis (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/acomptes/{IdAcompte}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un acompte (tenant client et devis). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une ligne pour un acompte (tenant client et devis). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAcompte"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/acomptes/{IdAcompte}/lignes/{IdLigneAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
                /** @description L'identifiant de la ligne d'acompte à manipuler. */
                IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un acompte (tenant client et devis). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une ligne pour un acompte (tenant client et devis). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une ligne pour un acompte (tenant client et devis). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAcompte"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/devis/{IdDevis}/associe-acomptes/{IdAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant du devis à manipuler. */
                IdDevis: components["parameters"]["IdDevis"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        get?: never;
        /** @description Associe un acompte à un devis pour un client. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        /** @description Dissocie un acompte d'un devis pour un client. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant du devis à manipuler. */
                    IdDevis: components["parameters"]["IdDevis"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les factures commerciales pour un client. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FactureCommercialeArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une facture commerciale pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["FactureCommerciale"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère une facture commerciale pour un client. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FactureCommerciale"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une facture commerciale pour un client. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une facture commerciale pour un client. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["FactureCommerciale"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs factures commerciales pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Télécharge une facture commerciale pour un client. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/bloque": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        /** @description Bloque une facture commerciale pour un client. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une facture commerciale pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/duplique-acomptes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une facture commerciale en acompte pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/duplique-avoirs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une facture commerciale en avoir pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/duplique-devis": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une facture commerciale en devis pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour une facture commerciale (tenant client). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneFactureCommercialeArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une ligne pour une facture commerciale (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneFactureCommerciale"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/lignes/{IdLigneFactureCommerciale}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de la ligne de facture commerciale à manipuler. */
                IdLigneFactureCommerciale: components["parameters"]["IdLigneFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour une facture commerciale (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de la ligne de facture commerciale à manipuler. */
                    IdLigneFactureCommerciale: components["parameters"]["IdLigneFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneFactureCommerciale"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une ligne pour une facture commerciale (tenant client). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de la ligne de facture commerciale à manipuler. */
                    IdLigneFactureCommerciale: components["parameters"]["IdLigneFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une ligne pour une facture commerciale (tenant client). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de la ligne de facture commerciale à manipuler. */
                    IdLigneFactureCommerciale: components["parameters"]["IdLigneFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneFactureCommerciale"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/lignes/{IdLigneFactureCommerciale}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de la ligne de facture commerciale à manipuler. */
                IdLigneFactureCommerciale: components["parameters"]["IdLigneFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une ligne pour une facture commerciale (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de la ligne de facture commerciale à manipuler. */
                    IdLigneFactureCommerciale: components["parameters"]["IdLigneFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/acomptes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les acomptes pour une facture commerciale (tenant client). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un acompte pour une facture commerciale (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Acompte"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/acomptes/{IdAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère un acompte pour une facture commerciale (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Acompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un acompte pour une facture commerciale (tenant client). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un acompte pour une facture commerciale (tenant client). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Acompte"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/acomptes/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs acomptes pour une facture commerciale (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/acomptes/{IdAcompte}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Télécharge un acompte pour une facture commerciale (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/acomptes/{IdAcompte}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un acompte (tenant client et facture commerciale). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une ligne pour un acompte (tenant client et facture commerciale). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAcompte"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/acomptes/{IdAcompte}/lignes/{IdLigneAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
                /** @description L'identifiant de la ligne d'acompte à manipuler. */
                IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un acompte (tenant client et facture commerciale). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une ligne pour un acompte (tenant client et facture commerciale). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une ligne pour un acompte (tenant client et facture commerciale). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAcompte"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/associe-acomptes/{IdAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        get?: never;
        /** @description Associe un acompte à une facture commerciale pour un client. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        /** @description Dissocie un acompte d'une facture commerciale pour un client. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/avoirs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les avoirs pour une facture commerciale (tenant client). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AvoirArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un avoir pour une facture commerciale (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Avoir"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/avoirs/{IdAvoir}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère un avoir pour une facture commerciale (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Avoir"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un avoir pour une facture commerciale (tenant client). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un avoir pour une facture commerciale (tenant client). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Avoir"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/avoirs/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs avoirs pour une facture commerciale (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/avoirs/{IdAvoir}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Télécharge un avoir pour une facture commerciale (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/avoirs/{IdAvoir}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un avoir (tenant client et facture commerciale). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAvoirArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une ligne pour un avoir (tenant client et facture commerciale). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAvoir"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/avoirs/{IdAvoir}/lignes/{IdLigneAvoir}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
                /** @description L'identifiant de la ligne d'avoir à manipuler. */
                IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un avoir (tenant client et facture commerciale). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                    /** @description L'identifiant de la ligne d'avoir à manipuler. */
                    IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAvoir"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une ligne pour un avoir (tenant client et facture commerciale). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                    /** @description L'identifiant de la ligne d'avoir à manipuler. */
                    IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une ligne pour un avoir (tenant client et facture commerciale). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                    /** @description L'identifiant de la ligne d'avoir à manipuler. */
                    IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAvoir"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/factures-commerciales/{IdFactureCommerciale}/associe-avoirs/{IdAvoir}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de la facture commerciale à manipuler. */
                IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        get?: never;
        /** @description Associe un avoir à une facture commerciale pour un client. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        /** @description Dissocie un avoir d'une facture commerciale pour un client. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de la facture commerciale à manipuler. */
                    IdFactureCommerciale: components["parameters"]["IdFactureCommerciale"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les acomptes pour un client. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un acompte pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Acompte"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes/{IdAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère un acompte pour un client. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Acompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un acompte pour un client. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un acompte pour un client. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Acompte"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs acomptes pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes/{IdAcompte}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Télécharge un acompte pour un client. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes/{IdAcompte}/bloque": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        get?: never;
        /** @description Bloque un acompte pour un client. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes/{IdAcompte}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un acompte pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes/{IdAcompte}/duplique-factures-commerciales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un acompte en facture commerciale pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes/{IdAcompte}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un acompte (tenant client). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une ligne pour un acompte (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAcompte"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes/{IdAcompte}/lignes/{IdLigneAcompte}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
                /** @description L'identifiant de la ligne d'acompte à manipuler. */
                IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un acompte (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAcompte"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une ligne pour un acompte (tenant client). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une ligne pour un acompte (tenant client). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAcompte"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/acomptes/{IdAcompte}/lignes/{IdLigneAcompte}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'acompte à manipuler. */
                IdAcompte: components["parameters"]["IdAcompte"];
                /** @description L'identifiant de la ligne d'acompte à manipuler. */
                IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une ligne pour un acompte (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'acompte à manipuler. */
                    IdAcompte: components["parameters"]["IdAcompte"];
                    /** @description L'identifiant de la ligne d'acompte à manipuler. */
                    IdLigneAcompte: components["parameters"]["IdLigneAcompte"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les avoirs pour un client. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["AvoirArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un avoir pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Avoir"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs/{IdAvoir}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère un avoir pour un client. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Avoir"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un avoir pour un client. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un avoir pour un client. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Avoir"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs avoirs pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs/{IdAvoir}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Télécharge un avoir pour un client. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs/{IdAvoir}/bloque": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        get?: never;
        /** @description Bloque un avoir pour un client. */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs/{IdAvoir}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un avoir pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs/{IdAvoir}/duplique-factures-commerciales": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un avoir en facture commerciale pour un client. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs/{IdAvoir}/lignes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les lignes pour un avoir (tenant client). */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAvoirArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une ligne pour un avoir (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAvoir"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs/{IdAvoir}/lignes/{IdLigneAvoir}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
                /** @description L'identifiant de la ligne d'avoir à manipuler. */
                IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
            };
            cookie?: never;
        };
        /** @description Récupère une ligne pour un avoir (tenant client). */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                    /** @description L'identifiant de la ligne d'avoir à manipuler. */
                    IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["LigneAvoir"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une ligne pour un avoir (tenant client). */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                    /** @description L'identifiant de la ligne d'avoir à manipuler. */
                    IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une ligne pour un avoir (tenant client). */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                    /** @description L'identifiant de la ligne d'avoir à manipuler. */
                    IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["LigneAvoir"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/clients/{IdClient}/avoirs/{IdAvoir}/lignes/{IdLigneAvoir}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du client à manipuler. */
                IdClient: components["parameters"]["IdClient"];
                /** @description L'identifiant de l'avoir à manipuler. */
                IdAvoir: components["parameters"]["IdAvoir"];
                /** @description L'identifiant de la ligne d'avoir à manipuler. */
                IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une ligne pour un avoir (tenant client). */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du client à manipuler. */
                    IdClient: components["parameters"]["IdClient"];
                    /** @description L'identifiant de l'avoir à manipuler. */
                    IdAvoir: components["parameters"]["IdAvoir"];
                    /** @description L'identifiant de la ligne d'avoir à manipuler. */
                    IdLigneAvoir: components["parameters"]["IdLigneAvoir"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les fournisseurs pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FournisseurArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs/{IdFournisseur}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du fournisseur à manipuler. */
                IdFournisseur: components["parameters"]["IdFournisseur"];
            };
            cookie?: never;
        };
        /** @description Récupère un fournisseur pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur à manipuler. */
                    IdFournisseur: components["parameters"]["IdFournisseur"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fournisseur"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un fournisseur pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur à manipuler. */
                    IdFournisseur: components["parameters"]["IdFournisseur"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs/{IdFournisseur}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du fournisseur à manipuler. */
                IdFournisseur: components["parameters"]["IdFournisseur"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un fournisseur pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur à manipuler. */
                    IdFournisseur: components["parameters"]["IdFournisseur"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs-moraux": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les fournisseurs moraux pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FournisseurMoralArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un fournisseur moral pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["FournisseurMoral"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs-moraux/{IdFournisseurMoral}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du fournisseur moral à manipuler. */
                IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
            };
            cookie?: never;
        };
        /** @description Récupère un fournisseur moral pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FournisseurMoral"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un fournisseur moral pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un fournisseur moral pour un dossier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["FournisseurMoral"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs-moraux/{IdFournisseurMoral}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du fournisseur moral à manipuler. */
                IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un fournisseur moral pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs-moraux/{IdFournisseurMoral}/contacts": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du fournisseur moral à manipuler. */
                IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les contacts pour un fournisseur moral. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ContactArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un contact pour un fournisseur moral. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Contact"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs-moraux/{IdFournisseurMoral}/contacts/{IdContact}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du fournisseur moral à manipuler. */
                IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                /** @description L'identifiant du contact à manipuler. */
                IdContact: components["parameters"]["IdContact"];
            };
            cookie?: never;
        };
        /** @description Récupère un contact pour un fournisseur moral. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Contact"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un contact pour un fournisseur moral. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un contact pour un fournisseur moral. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Contact"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs-moraux/{IdFournisseurMoral}/contacts/{IdContact}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du fournisseur moral à manipuler. */
                IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                /** @description L'identifiant du contact à manipuler. */
                IdContact: components["parameters"]["IdContact"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un contact pour un fournisseur moral. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur moral à manipuler. */
                    IdFournisseurMoral: components["parameters"]["IdFournisseurMoral"];
                    /** @description L'identifiant du contact à manipuler. */
                    IdContact: components["parameters"]["IdContact"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs-physiques": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les fournisseurs physiques pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FournisseurPhysiqueArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un fournisseur physique pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["FournisseurPhysique"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs-physiques/{IdFournisseurPhysique}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du fournisseur physique à manipuler. */
                IdFournisseurPhysique: components["parameters"]["IdFournisseurPhysique"];
            };
            cookie?: never;
        };
        /** @description Récupère un fournisseur physique pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur physique à manipuler. */
                    IdFournisseurPhysique: components["parameters"]["IdFournisseurPhysique"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FournisseurPhysique"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un fournisseur physique pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur physique à manipuler. */
                    IdFournisseurPhysique: components["parameters"]["IdFournisseurPhysique"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un fournisseur physique pour un dossier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur physique à manipuler. */
                    IdFournisseurPhysique: components["parameters"]["IdFournisseurPhysique"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["FournisseurPhysique"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/fournisseurs-physiques/{IdFournisseurPhysique}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant du fournisseur physique à manipuler. */
                IdFournisseurPhysique: components["parameters"]["IdFournisseurPhysique"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un fournisseur physique pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant du fournisseur physique à manipuler. */
                    IdFournisseurPhysique: components["parameters"]["IdFournisseurPhysique"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/articles": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les articles pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ArticleAvecFamilleArticleArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/articles/{IdArticle}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'article à manipuler. */
                IdArticle: components["parameters"]["IdArticle"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Supprime un article pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'article à manipuler. */
                    IdArticle: components["parameters"]["IdArticle"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/articles/{IdArticle}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'article à manipuler. */
                IdArticle: components["parameters"]["IdArticle"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un article pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'article à manipuler. */
                    IdArticle: components["parameters"]["IdArticle"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/articles-produits/{IdArticleProduit}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'article produit à manipuler. */
                IdArticleProduit: components["parameters"]["IdArticleProduit"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un article produit pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'article produit à manipuler. */
                    IdArticleProduit: components["parameters"]["IdArticleProduit"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/articles-services/{IdArticleService}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'article service à manipuler. */
                IdArticleService: components["parameters"]["IdArticleService"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un article service pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'article service à manipuler. */
                    IdArticleService: components["parameters"]["IdArticleService"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Recupère toutes les familles d'articles pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FamilleArticleArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une famille d'articles pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["FamilleArticle"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
            };
            cookie?: never;
        };
        /** @description Récupère une famille d'articles pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["FamilleArticle"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une famille d'articles pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une famille d'articles pour un dossier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["FamilleArticle"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}/articles": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les articles pour une famille d'articles. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ArticleArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}/articles/{IdArticle}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                /** @description L'identifiant de l'article à manipuler. */
                IdArticle: components["parameters"]["IdArticle"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Supprime un article pour une famille d'articles. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article à manipuler. */
                    IdArticle: components["parameters"]["IdArticle"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}/articles/{IdArticle}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                /** @description L'identifiant de l'article à manipuler. */
                IdArticle: components["parameters"]["IdArticle"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un article pour une famille d'articles. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article à manipuler. */
                    IdArticle: components["parameters"]["IdArticle"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}/articles-produits": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les articles produits pour une famille d'articles. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ArticleProduitArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un article produit pour une famille d'articles. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ArticleProduit"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}/articles-produits/{IdArticleProduit}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                /** @description L'identifiant de l'article produit à manipuler. */
                IdArticleProduit: components["parameters"]["IdArticleProduit"];
            };
            cookie?: never;
        };
        /** @description Récupère un article produit pour une famille d'articles. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article produit à manipuler. */
                    IdArticleProduit: components["parameters"]["IdArticleProduit"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ArticleProduit"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un article produit pour une famille d'articles. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article produit à manipuler. */
                    IdArticleProduit: components["parameters"]["IdArticleProduit"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un article produit pour une famille d'articles. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article produit à manipuler. */
                    IdArticleProduit: components["parameters"]["IdArticleProduit"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ArticleProduit"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}/articles-produits/{IdArticleProduit}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                /** @description L'identifiant de l'article produit à manipuler. */
                IdArticleProduit: components["parameters"]["IdArticleProduit"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un article produit pour une famille d'articles. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article produit à manipuler. */
                    IdArticleProduit: components["parameters"]["IdArticleProduit"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}/articles-services": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
            };
            cookie?: never;
        };
        /** @description Récupère tous les articles services pour une famille d'articles. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ArticleServiceArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute un article service pour une famille d'articles. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ArticleService"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}/articles-services/{IdArticleService}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                /** @description L'identifiant de l'article service à manipuler. */
                IdArticleService: components["parameters"]["IdArticleService"];
            };
            cookie?: never;
        };
        /** @description Récupère un article service pour une famille d'articles. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article service à manipuler. */
                    IdArticleService: components["parameters"]["IdArticleService"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["ArticleService"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime un article service pour une famille d'articles. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article service à manipuler. */
                    IdArticleService: components["parameters"]["IdArticleService"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie un article service pour une famille d'articles. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article service à manipuler. */
                    IdArticleService: components["parameters"]["IdArticleService"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["ArticleService"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/familles-articles/{IdFamilleArticle}/articles-services/{IdArticleService}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de la famille d'articles à manipuler. */
                IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                /** @description L'identifiant de l'article service à manipuler. */
                IdArticleService: components["parameters"]["IdArticleService"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique un article service pour une famille d'articles. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de la famille d'articles à manipuler. */
                    IdFamilleArticle: components["parameters"]["IdFamilleArticle"];
                    /** @description L'identifiant de l'article service à manipuler. */
                    IdArticleService: components["parameters"]["IdArticleService"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/unites": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
            };
            cookie?: never;
        };
        /** @description Récupère toutes les unités pour un dossier. */
        get: {
            parameters: {
                query?: {
                    /** @description La clé du dernier résultat à parcourir. */
                    "Pagination.Key"?: components["parameters"]["Pagination.Key"];
                    /** @description Le numéro de la page à obtenir. */
                    "Pagination.Page"?: components["parameters"]["Pagination.Page"];
                    /** @description Le nombre maximum de résultats à obtenir. */
                    "Pagination.Limit"?: components["parameters"]["Pagination.Limit"];
                    /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
                    "Pagination.Reverse"?: components["parameters"]["Pagination.Reverse"];
                };
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["UniteArray"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        /** @description Ajoute une unité pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Unite"];
            responses: {
                201: components["responses"]["Id"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/unites/{IdUnite}": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'unité à manipuler. */
                IdUnite: components["parameters"]["IdUnite"];
            };
            cookie?: never;
        };
        /** @description Récupère une unité pour un dossier. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'unité à manipuler. */
                    IdUnite: components["parameters"]["IdUnite"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Unite"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        /** @description Supprime une unité pour un dossier. */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'unité à manipuler. */
                    IdUnite: components["parameters"]["IdUnite"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        options?: never;
        head?: never;
        /** @description Modifie une unité pour un dossier. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'unité à manipuler. */
                    IdUnite: components["parameters"]["IdUnite"];
                };
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Unite"];
            responses: {
                /** @description No Content */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        trace?: never;
    };
    "/v1/calliope/utilisateur/dossiers/{IdDossier}/unites/{IdUnite}/duplique": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du dossier à manipuler. */
                IdDossier: components["parameters"]["IdDossier"];
                /** @description L'identifiant de l'unité à manipuler. */
                IdUnite: components["parameters"]["IdUnite"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Duplique une unité pour un dossier. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du dossier à manipuler. */
                    IdDossier: components["parameters"]["IdDossier"];
                    /** @description L'identifiant de l'unité à manipuler. */
                    IdUnite: components["parameters"]["IdUnite"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                201: components["responses"]["Id"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/service/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère la version du service web. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Version"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/service/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Récupère la configuration du service web. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Config"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/service/logs/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Télécharge plusieurs fichiers de log du service web. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: components["requestBodies"]["Ids"];
            responses: {
                200: components["responses"]["Fichier"];
                400: components["responses"]["BadRequest"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/service/logs/{IdLog}/telecharge": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description L'identifiant du fichier de log à manipuler. */
                IdLog: components["parameters"]["IdLog"];
            };
            cookie?: never;
        };
        /** @description Télécharge un fichier de log du service web. */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description L'identifiant du fichier de log à manipuler. */
                    IdLog: components["parameters"]["IdLog"];
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: components["responses"]["Fichier"];
                401: components["responses"]["Unauthorized"];
                403: components["responses"]["Forbidden"];
                404: components["responses"]["NotFound"];
                406: components["responses"]["NotAcceptable"];
                500: components["responses"]["InternalServerError"];
                503: components["responses"]["ServiceUnavailable"];
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description L'accès.
         * @enum {string}
         */
        Acces: "LectureEcriture" | "Lecture";
        /**
         * @description Le code de la devise à la norme ISO 4217 (alpha-3).
         * @enum {string}
         */
        CodeDevise: "EUR";
        /**
         * @description Le code du pays à la norme ISO 3166-1 (alpha-2).
         * @enum {string}
         */
        CodePays: "FR";
        /**
         * @description Le code de la TVA.
         * @enum {string}
         */
        CodeTva: "AE" | "E" | "G" | "K" | "S";
        /**
         * @description Le type de l'article.
         * @enum {string}
         */
        TypeArticle: "Produit" | "Service";
        /**
         * @description Le type du client.
         * @enum {string}
         */
        TypeClient: "Physique" | "Moral";
        /**
         * @description Le type du fournisseur.
         * @enum {string}
         */
        TypeFournisseur: "Physique" | "Moral";
        /**
         * @description Le type de la facture.
         * @enum {string}
         */
        TypeFacture: "FactureCommerciale" | "Acompte" | "Avoir";
        /**
         * @description La méthode de connexion.
         * @enum {string}
         */
        MethodeConnexion: "Simple" | "GererMesAffaires";
        /**
         * @description La permission.
         * @enum {string}
         */
        Permission: "Client" | "Salarie" | "Admin";
        /** AuthWrapper */
        AuthWrapper: {
            /**
             * Format: email
             * @description L'identifiant de connexion.
             */
            Identifiant: string;
            /** @description Le mot de passe de connexion hashé avec l'algorithme SHA-256. */
            MotDePasse: string;
        };
        /** AuthGererMesAffairesWrapper */
        AuthGererMesAffairesWrapper: {
            /** @description Le jeton d'accès délivré par GererMesAffaires. */
            AccessToken: string;
            /** @description Le jeton d'actualisation délivré par GererMesAffaires. */
            RefreshToken: string;
        };
        /** DoubleAuthWrapper */
        DoubleAuthWrapper: {
            /** @description Le code de mot de passe à usage unique. */
            Code: string;
        };
        /** BaseDeDonneesWrapper */
        BaseDeDonneesWrapper: {
            /** @description Le nom. */
            Nom: string;
            /** @description Le serveur. */
            Serveur: string;
            /** @description L'utilisateur. */
            Utilisateur: string;
            /** @description Le mot de passe. */
            MotDePasse: string;
            /**
             * @description Le fournisseur.
             * @enum {string}
             */
            Fournisseur: "WinDevClientServeurHF";
        };
        /** ConfigWrapper */
        ConfigWrapper: {
            /** @description Le paramètre de debug du service web. */
            Debug: boolean;
            BaseDeDonnees: components["schemas"]["BaseDeDonneesWrapper"];
            GererMesAffairesProxy: components["schemas"]["ProxyWrapper"];
        };
        /** ErreurWrapper */
        ErreurWrapper: {
            /** @description Le code statut. */
            CodeStatut: number;
            /** @description L'indication. */
            Indication: string;
            /** @description Le détail avec un message exhaustif. */
            Detail: string;
        };
        /** ExtraWrapper */
        ExtraWrapper: {
            /** @description Le nombre total de résultats (sans pagination). */
            Total: number;
            /** @description Le nombre total de résultats recherchés (sans pagination). */
            TotalQuery: number;
        };
        /** FichierWrapper */
        FichierWrapper: {
            /** @description Le nom. */
            Nom: string;
            /** @description L'extension. */
            Extension: string;
            /**
             * Format: byte
             * @description Le contenu encodé en **base64**.
             */
            Base64: string;
            /** @description La somme de contrôle hashée avec l'algorithme SHA-256. */
            Checksum: string;
        };
        /** HorodatageWrapper */
        HorodatageWrapper: {
            /**
             * Format: date-time
             * @description La date et l'heure de création à la norme ISO 8601.
             */
            Creation: string | null;
            /**
             * Format: date-time
             * @description La date et l'heure de dernière modification à la norme ISO 8601.
             */
            Modification: string | null;
        };
        /** IdsWrapper */
        IdsWrapper: {
            Ids?: number[];
        };
        /** IdWrapper */
        IdWrapper: {
            /** Format: int64 */
            Id: number;
        };
        /** PingWrapper */
        PingWrapper: {
            /**
             * Format: hostname
             * @description Le nom d'hôte du serveur qui héberge la base de données.
             */
            ServeurHyperFile: string;
            /**
             * Format: hostname
             * @description Le nom d'hôte du serveur qui héberge le service web.
             */
            ServeurWebservice: string;
            /**
             * Format: ipv4
             * @description L'adresse IP du client.
             */
            Client: string;
        };
        /** ProxyWrapper */
        ProxyWrapper: {
            /**
             * @description Le mode.
             * @enum {string}
             */
            Mode: "Test" | "Production";
            /** @description L'identifiant du client. */
            ClientId: string;
            /** @description Le secret du client. */
            ClientSecret: string | null;
        };
        /** TokenWrapper */
        TokenWrapper: {
            /** @description Le jeton au format **JWT (JSON Web Token)**. */
            Token: string;
            /**
             * Format: date-time
             * @description La date et l'heure d'expiration du jeton à la norme ISO 8601.
             */
            Expiration: string;
        };
        /** TokenGererMesAffairesWrapper */
        TokenGererMesAffairesWrapper: {
            /** @description Le jeton d'accès délivré par GererMesAffaires. */
            AccessToken: string;
            /** @description Le jeton d'actualisation délivré par GererMesAffaires. */
            RefreshToken: string;
        };
        /** VersionWrapper */
        VersionWrapper: {
            /**
             * Format: date
             * @description La date du dernier déploiement à la norme ISO 8601.
             */
            Generation: string;
            /** @description La version du module utilisé lors du dernier déploiement. */
            Module: string;
        };
        /** AcompteRequest */
        AcompteRequest: {
            CodeDevise?: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc?: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur?: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur?: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur?: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur?: string | null;
            AdresseVendeur?: components["schemas"]["AdresseRequest"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur?: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur?: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur?: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur?: string | null;
            AdresseAcheteur?: components["schemas"]["AdresseRequest"];
            AdresseFacturation?: components["schemas"]["AdresseRequest"];
            AdresseLivraison?: components["schemas"]["AdresseRequest"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge?: number | null;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation?: string;
            /**
             * Format: date
             * @description La date d'échéance.
             */
            Echeance?: string | null;
        };
        /** AdresseRequest */
        AdresseRequest: {
            /** @description La première ligne. */
            LigneUne?: string;
            /** @description La seconde ligne. */
            LigneDeux?: string | null;
            /** @description La troisième ligne. */
            LigneTrois?: string | null;
            /** @description Le code postal. */
            CodePostal?: string;
            /** @description La ville. */
            Ville?: string;
            CodePays?: components["schemas"]["CodePays"];
        } | null;
        /** ArticleProduitRequest */
        ArticleProduitRequest: {
            CodeDevise?: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc?: boolean;
            /** @description La référence. */
            Reference?: string | null;
            /** @description Le libellé. */
            Libelle?: string;
            /** @description La description. */
            Description?: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite?: number;
            /** @description L'unité. */
            Unite?: string | null;
            /**
             * Format: int64
             * @description L'identifiant de la TVA.
             */
            IdTva?: number;
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt?: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc?: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge.
             */
            PourcentageCharge?: number | null;
        };
        /** ArticleServiceRequest */
        ArticleServiceRequest: {
            CodeDevise?: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc?: boolean;
            /** @description La référence. */
            Reference?: string | null;
            /** @description Le libellé. */
            Libelle?: string;
            /** @description La description. */
            Description?: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite?: number;
            /** @description L'unité. */
            Unite?: string | null;
            /**
             * Format: int64
             * @description L'identifiant de la TVA.
             */
            IdTva?: number;
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt?: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc?: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge.
             */
            PourcentageCharge?: number | null;
        };
        /** AvoirRequest */
        AvoirRequest: {
            CodeDevise?: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc?: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur?: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur?: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur?: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur?: string | null;
            AdresseVendeur?: components["schemas"]["AdresseRequest"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur?: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur?: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur?: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur?: string | null;
            AdresseAcheteur?: components["schemas"]["AdresseRequest"];
            AdresseFacturation?: components["schemas"]["AdresseRequest"];
            AdresseLivraison?: components["schemas"]["AdresseRequest"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge?: number | null;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation?: string;
            /**
             * Format: date
             * @description La date d'échéance.
             */
            Echeance?: string | null;
        };
        /** CiviliteRequest */
        CiviliteRequest: {
            /** @description Le libellé. */
            Libelle?: string;
            /** @description L'abréviation. */
            Abreviation?: string;
        };
        /** ClientMoralRequest */
        ClientMoralRequest: {
            /** @description La raison sociale. */
            RaisonSociale?: string;
            /**
             * Format: int64
             * @description L'identifiant du statut juridique.
             */
            IdStatutJuridique?: number;
            Adresse?: components["schemas"]["AdresseRequest"];
            /**
             * Format: email
             * @description Le mail.
             */
            Mail?: string | null;
            /** @description Le numéro de téléphone. */
            Telephone?: string | null;
            /** @description Le siret. */
            Siret?: string | null;
            /** @description Le numéro de TVA intracommunautaire. */
            NumeroIntracom?: string | null;
            /** @description Le code APE (NAF). */
            Ape?: string | null;
            /** @description La note. */
            Note?: string | null;
        };
        /** ClientPhysiqueRequest */
        ClientPhysiqueRequest: {
            /** @description Le nom. */
            Nom?: string;
            /** @description Le prénom. */
            Prenom?: string;
            /**
             * Format: int64
             * @description L'identifiant de la civilité.
             */
            IdCivilite?: number;
            Adresse?: components["schemas"]["AdresseRequest"];
            /**
             * Format: email
             * @description Le mail.
             */
            Mail?: string | null;
            /** @description Le numéro de téléphone. */
            Telephone?: string | null;
            /** @description La note. */
            Note?: string | null;
        };
        /** ContactRequest */
        ContactRequest: {
            /** @description Le nom. */
            Nom?: string;
            /** @description Le prénom. */
            Prenom?: string;
            /**
             * Format: int64
             * @description L'identifiant de la civilité.
             */
            IdCivilite?: number;
            Adresse?: components["schemas"]["AdresseRequest"];
            /**
             * Format: email
             * @description Le mail.
             */
            Mail?: string | null;
            /** @description Le numéro de téléphone. */
            Telephone?: string | null;
            /** @description La note. */
            Note?: string | null;
        };
        /** DevisRequest */
        DevisRequest: {
            CodeDevise?: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc?: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur?: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur?: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur?: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur?: string | null;
            AdresseVendeur?: components["schemas"]["AdresseRequest"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur?: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur?: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur?: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur?: string | null;
            AdresseAcheteur?: components["schemas"]["AdresseRequest"];
            AdresseFacturation?: components["schemas"]["AdresseRequest"];
            AdresseLivraison?: components["schemas"]["AdresseRequest"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge?: number | null;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation?: string;
        };
        /** FactureCommercialeRequest */
        FactureCommercialeRequest: {
            CodeDevise?: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc?: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur?: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur?: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur?: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur?: string | null;
            AdresseVendeur?: components["schemas"]["AdresseRequest"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur?: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur?: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur?: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur?: string | null;
            AdresseAcheteur?: components["schemas"]["AdresseRequest"];
            AdresseFacturation?: components["schemas"]["AdresseRequest"];
            AdresseLivraison?: components["schemas"]["AdresseRequest"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge?: number | null;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation?: string;
            /**
             * Format: date
             * @description La date d'échéance.
             */
            Echeance?: string | null;
        };
        /** FamilleArticleRequest */
        FamilleArticleRequest: {
            /** @description Le libellé. */
            Libelle?: string;
            /** @description Le compte comptable. */
            CompteComptable?: string;
        };
        /** FournisseurMoralRequest */
        FournisseurMoralRequest: {
            /** @description La raison sociale. */
            RaisonSociale?: string;
            /**
             * Format: int64
             * @description L'identifiant du statut juridique.
             */
            IdStatutJuridique?: number;
            Adresse?: components["schemas"]["AdresseRequest"];
            /**
             * Format: email
             * @description Le mail.
             */
            Mail?: string | null;
            /** @description Le numéro de téléphone. */
            Telephone?: string | null;
            /** @description Le siret. */
            Siret?: string | null;
            /** @description Le numéro de TVA intracommunautaire. */
            NumeroIntracom?: string | null;
            /** @description Le code APE (NAF). */
            Ape?: string | null;
            /** @description La note. */
            Note?: string | null;
        };
        /** FournisseurPhysiqueRequest */
        FournisseurPhysiqueRequest: {
            /** @description Le nom. */
            Nom?: string;
            /** @description Le prénom. */
            Prenom?: string;
            /**
             * Format: int64
             * @description L'identifiant de la civilité.
             */
            IdCivilite?: number;
            Adresse?: components["schemas"]["AdresseRequest"];
            /**
             * Format: email
             * @description Le mail.
             */
            Mail?: string | null;
            /** @description Le numéro de téléphone. */
            Telephone?: string | null;
            /** @description La note. */
            Note?: string | null;
        };
        /** LigneAcompteRequest */
        LigneAcompteRequest: {
            /** @description La référence. */
            Reference?: string | null;
            /** @description Le compte comptable. */
            CompteComptable?: string;
            /** @description Le libellé. */
            Libelle?: string;
            /** @description La description. */
            Description?: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite?: number;
            /** @description L'unité. */
            Unite?: string | null;
            /**
             * Format: int64
             * @description L'identifiant de la TVA.
             */
            IdTva?: number;
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt?: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc?: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise à la ligne.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge à la ligne.
             */
            PourcentageCharge?: number | null;
        };
        /** LigneAvoirRequest */
        LigneAvoirRequest: {
            /** @description La référence. */
            Reference?: string | null;
            /** @description Le compte comptable. */
            CompteComptable?: string;
            /** @description Le libellé. */
            Libelle?: string;
            /** @description La description. */
            Description?: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite?: number;
            /** @description L'unité. */
            Unite?: string | null;
            /**
             * Format: int64
             * @description L'identifiant de la TVA.
             */
            IdTva?: number;
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt?: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc?: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise à la ligne.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge à la ligne.
             */
            PourcentageCharge?: number | null;
        };
        /** LigneDevisRequest */
        LigneDevisRequest: {
            /** @description La référence. */
            Reference?: string | null;
            /** @description Le compte comptable. */
            CompteComptable?: string;
            /** @description Le libellé. */
            Libelle?: string;
            /** @description La description. */
            Description?: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite?: number;
            /** @description L'unité. */
            Unite?: string | null;
            /**
             * Format: int64
             * @description L'identifiant de la TVA.
             */
            IdTva?: number;
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt?: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc?: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise à la ligne.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge à la ligne.
             */
            PourcentageCharge?: number | null;
        };
        /** LigneFactureCommercialeRequest */
        LigneFactureCommercialeRequest: {
            /** @description La référence. */
            Reference?: string | null;
            /** @description Le compte comptable. */
            CompteComptable?: string;
            /** @description Le libellé. */
            Libelle?: string;
            /** @description La description. */
            Description?: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite?: number;
            /** @description L'unité. */
            Unite?: string | null;
            /**
             * Format: int64
             * @description L'identifiant de la TVA.
             */
            IdTva?: number;
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt?: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc?: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise à la ligne.
             */
            PourcentageRemise?: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge à la ligne.
             */
            PourcentageCharge?: number | null;
        };
        /** StatutJuridiqueRequest */
        StatutJuridiqueRequest: {
            /** @description Le libellé. */
            Libelle?: string;
            /** @description L'abréviation. */
            Abreviation?: string;
        };
        /** TvaRequest */
        TvaRequest: {
            /** @description Le libellé. */
            Libelle?: string;
            CodeTva?: components["schemas"]["CodeTva"];
            /**
             * Format: float
             * @description Le taux.
             */
            Taux?: number;
        };
        /** UniteRequest */
        UniteRequest: {
            /** @description Le libellé. */
            Libelle?: string;
            /** @description Le symbole. */
            Symbole?: string;
        };
        /** UtilisateurRequest */
        UtilisateurRequest: {
            /** @description Le nom. */
            Nom?: string;
            /** @description Le prénom. */
            Prenom?: string;
            /**
             * Format: int64
             * @description L'identifiant de la civilité.
             */
            IdCivilite?: number;
            Adresse?: components["schemas"]["AdresseRequest"];
            /**
             * Format: email
             * @description Le mail.
             */
            Mail?: string | null;
            /** @description Le numéro de téléphone. */
            Telephone?: string | null;
            /**
             * Format: email
             * @description L'identifiant de connexion.
             */
            Identifiant?: string;
            /** @description Le mot de passe de connexion hashé avec l'algorithme SHA-256. */
            MotDePasse?: string;
        };
        /** AcompteResponse */
        AcompteResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /**
             * Format: int64
             * @description Le numéro permanent.
             */
            NumeroPermanent: number | null;
            /**
             * Format: int64
             * @description Le numéro provisoire.
             */
            NumeroProvisoire: number;
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur: string | null;
            AdresseVendeur: components["schemas"]["AdresseResponse"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur: string | null;
            AdresseAcheteur: components["schemas"]["AdresseResponse"];
            AdresseFacturation: components["schemas"]["AdresseResponse"];
            AdresseLivraison: components["schemas"]["AdresseResponse"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise au document.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise au document.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge au document.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge au document.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation: string;
            /**
             * Format: date
             * @description La date de blocage.
             */
            Blocage: string | null;
            /**
             * Format: date
             * @description La date d'échéance.
             */
            Echeance: string | null;
        };
        /** AcompteAvecClientResponse */
        AcompteAvecClientResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /**
             * Format: int64
             * @description Le numéro permanent.
             */
            NumeroPermanent: number | null;
            /**
             * Format: int64
             * @description Le numéro provisoire.
             */
            NumeroProvisoire: number;
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur: string | null;
            AdresseVendeur: components["schemas"]["AdresseResponse"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur: string | null;
            AdresseAcheteur: components["schemas"]["AdresseResponse"];
            AdresseFacturation: components["schemas"]["AdresseResponse"];
            AdresseLivraison: components["schemas"]["AdresseResponse"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise au document.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise au document.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge au document.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge au document.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation: string;
            /**
             * Format: date
             * @description La date de blocage.
             */
            Blocage: string | null;
            /**
             * Format: date
             * @description La date d'échéance.
             */
            Echeance: string | null;
            Client: components["schemas"]["ClientResponse"];
        };
        /** AdresseResponse */
        AdresseResponse: (components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description La première ligne. */
            LigneUne: string;
            /** @description La seconde ligne. */
            LigneDeux: string | null;
            /** @description La troisième ligne. */
            LigneTrois: string | null;
            /** @description Le code postal. */
            CodePostal: string;
            /** @description La ville. */
            Ville: string;
            CodePays: components["schemas"]["CodePays"];
        }) | null;
        /** ArticleResponse */
        ArticleResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            TypeArticle: components["schemas"]["TypeArticle"];
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La référence. */
            Reference: string | null;
            /** @description Le libellé. */
            Libelle: string;
            /** @description La description. */
            Description: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite: number;
            /** @description L'unité. */
            Unite: string | null;
            Tva: components["schemas"]["TvaResponse"];
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
        };
        /** ArticleAvecFamilleArticleResponse */
        ArticleAvecFamilleArticleResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            TypeArticle: components["schemas"]["TypeArticle"];
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La référence. */
            Reference: string | null;
            /** @description Le libellé. */
            Libelle: string;
            /** @description La description. */
            Description: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite: number;
            /** @description L'unité. */
            Unite: string | null;
            Tva: components["schemas"]["TvaResponse"];
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
            FamilleArticle: components["schemas"]["FamilleArticleResponse"];
        };
        /** ArticleProduitResponse */
        ArticleProduitResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La référence. */
            Reference: string | null;
            /** @description Le libellé. */
            Libelle: string;
            /** @description La description. */
            Description: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite: number;
            /** @description L'unité. */
            Unite: string | null;
            Tva: components["schemas"]["TvaResponse"];
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
        };
        /** ArticleServiceResponse */
        ArticleServiceResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La référence. */
            Reference: string | null;
            /** @description Le libellé. */
            Libelle: string;
            /** @description La description. */
            Description: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite: number;
            /** @description L'unité. */
            Unite: string | null;
            Tva: components["schemas"]["TvaResponse"];
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
        };
        /** AvoirResponse */
        AvoirResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /**
             * Format: int64
             * @description Le numéro permanent.
             */
            NumeroPermanent: number | null;
            /**
             * Format: int64
             * @description Le numéro provisoire.
             */
            NumeroProvisoire: number;
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur: string | null;
            AdresseVendeur: components["schemas"]["AdresseResponse"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur: string | null;
            AdresseAcheteur: components["schemas"]["AdresseResponse"];
            AdresseFacturation: components["schemas"]["AdresseResponse"];
            AdresseLivraison: components["schemas"]["AdresseResponse"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise au document.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise au document.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge au document.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge au document.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation: string;
            /**
             * Format: date
             * @description La date de blocage.
             */
            Blocage: string | null;
            /**
             * Format: date
             * @description La date d'échéance.
             */
            Echeance: string | null;
        };
        /** AvoirAvecClientResponse */
        AvoirAvecClientResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /**
             * Format: int64
             * @description Le numéro permanent.
             */
            NumeroPermanent: number | null;
            /**
             * Format: int64
             * @description Le numéro provisoire.
             */
            NumeroProvisoire: number;
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur: string | null;
            AdresseVendeur: components["schemas"]["AdresseResponse"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur: string | null;
            AdresseAcheteur: components["schemas"]["AdresseResponse"];
            AdresseFacturation: components["schemas"]["AdresseResponse"];
            AdresseLivraison: components["schemas"]["AdresseResponse"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise au document.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise au document.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge au document.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge au document.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation: string;
            /**
             * Format: date
             * @description La date de blocage.
             */
            Blocage: string | null;
            /**
             * Format: date
             * @description La date d'échéance.
             */
            Echeance: string | null;
            Client: components["schemas"]["ClientResponse"];
        };
        /** CiviliteResponse */
        CiviliteResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le libellé. */
            Libelle: string;
            /** @description L'abréviation. */
            Abreviation: string;
        };
        /** ClientResponse */
        ClientResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            TypeClient: components["schemas"]["TypeClient"];
            /** @description La désignation. */
            Designation: string;
            Adresse: components["schemas"]["AdresseResponse"];
            /** @description Le mail. */
            Mail: string | null;
            /** @description Le numéro de téléphone. */
            Telephone: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description La note. */
            Note: string | null;
        };
        /** ClientMoralResponse */
        ClientMoralResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description La raison sociale. */
            RaisonSociale: string;
            StatutJuridique: components["schemas"]["StatutJuridiqueResponse"];
            Adresse: components["schemas"]["AdresseResponse"];
            /** @description Le mail. */
            Mail: string | null;
            /** @description Le numéro de téléphone. */
            Telephone: string | null;
            /** @description Le siret. */
            Siret: string | null;
            /** @description Le siren. */
            Siren: string | null;
            /** @description Le code NIC. */
            Nic: string | null;
            /** @description Le numéro de TVA intracommunautaire. */
            NumeroIntracom: string | null;
            /** @description Le code APE (NAF). */
            Ape: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description La note. */
            Note: string | null;
        };
        /** ClientPhysiqueResponse */
        ClientPhysiqueResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le nom. */
            Nom: string;
            /** @description Le prénom. */
            Prenom: string;
            Civilite: components["schemas"]["CiviliteResponse"];
            Adresse: components["schemas"]["AdresseResponse"];
            /** @description Le mail. */
            Mail: string | null;
            /** @description Le numéro de téléphone. */
            Telephone: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description La note. */
            Note: string | null;
        };
        /** ContactResponse */
        ContactResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le nom. */
            Nom: string;
            /** @description Le prénom. */
            Prenom: string;
            Civilite: components["schemas"]["CiviliteResponse"];
            Adresse: components["schemas"]["AdresseResponse"];
            /** @description Le mail. */
            Mail: string | null;
            /** @description Le numéro de téléphone. */
            Telephone: string | null;
            /** @description La note. */
            Note: string | null;
        };
        /** DevisResponse */
        DevisResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /**
             * Format: int64
             * @description Le numéro.
             */
            Numero: number;
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur: string | null;
            AdresseVendeur: components["schemas"]["AdresseResponse"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur: string | null;
            AdresseAcheteur: components["schemas"]["AdresseResponse"];
            AdresseFacturation: components["schemas"]["AdresseResponse"];
            AdresseLivraison: components["schemas"]["AdresseResponse"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise au document.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise au document.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge au document.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge au document.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation: string;
        };
        /** DevisAvecClientResponse */
        DevisAvecClientResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /**
             * Format: int64
             * @description Le numéro.
             */
            Numero: number;
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur: string | null;
            AdresseVendeur: components["schemas"]["AdresseResponse"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur: string | null;
            AdresseAcheteur: components["schemas"]["AdresseResponse"];
            AdresseFacturation: components["schemas"]["AdresseResponse"];
            AdresseLivraison: components["schemas"]["AdresseResponse"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise au document.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise au document.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge au document.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge au document.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation: string;
            Client: components["schemas"]["ClientResponse"];
        };
        /** DossierResponse */
        DossierResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description La raison sociale. */
            RaisonSociale: string;
            StatutJuridique: components["schemas"]["StatutJuridiqueResponse"];
            Adresse: components["schemas"]["AdresseResponse"];
            /** @description Le mail. */
            Mail: string | null;
            /** @description Le numéro de téléphone. */
            Telephone: string | null;
            /** @description Le siret. */
            Siret: string | null;
            /** @description Le siren. */
            Siren: string | null;
            /** @description Le code NIC. */
            Nic: string | null;
            /** @description Le numéro de TVA intracommunautaire. */
            NumeroIntracom: string | null;
            /** @description Le code APE (NAF). */
            Ape: string | null;
            /** @description L'identifiant GererMesAffaires. */
            IdGererMesAffaires: string | null;
            /** @description Le code. */
            Code: string;
            Acces: components["schemas"]["Acces"];
        };
        /** FactureCommercialeResponse */
        FactureCommercialeResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /**
             * Format: int64
             * @description Le numéro permanent.
             */
            NumeroPermanent: number | null;
            /**
             * Format: int64
             * @description Le numéro provisoire.
             */
            NumeroProvisoire: number;
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur: string | null;
            AdresseVendeur: components["schemas"]["AdresseResponse"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur: string | null;
            AdresseAcheteur: components["schemas"]["AdresseResponse"];
            AdresseFacturation: components["schemas"]["AdresseResponse"];
            AdresseLivraison: components["schemas"]["AdresseResponse"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise au document.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise au document.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge au document.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge au document.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation: string;
            /**
             * Format: date
             * @description La date de blocage.
             */
            Blocage: string | null;
            /**
             * Format: date
             * @description La date d'échéance.
             */
            Echeance: string | null;
        };
        /** FactureCommercialeAvecClientResponse */
        FactureCommercialeAvecClientResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /**
             * Format: int64
             * @description Le numéro permanent.
             */
            NumeroPermanent: number | null;
            /**
             * Format: int64
             * @description Le numéro provisoire.
             */
            NumeroProvisoire: number;
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La désignation du vendeur. */
            DesignationVendeur: string;
            /**
             * Format: email
             * @description Le mail du vendeur.
             */
            MailVendeur: string | null;
            /** @description Le siret du vendeur. */
            SiretVendeur: string;
            /** @description Le numéro de TVA intracommunautaire du vendeur. */
            NumeroIntracomVendeur: string | null;
            AdresseVendeur: components["schemas"]["AdresseResponse"];
            /** @description La désignation de l'acheteur. */
            DesignationAcheteur: string;
            /**
             * Format: email
             * @description Le mail de l'acheteur.
             */
            MailAcheteur: string | null;
            /** @description Le siret de l'acheteur. */
            SiretAcheteur: string | null;
            /** @description Le numéro de TVA intracommunautaire de l'acheteur. */
            NumeroIntracomAcheteur: string | null;
            AdresseAcheteur: components["schemas"]["AdresseResponse"];
            AdresseFacturation: components["schemas"]["AdresseResponse"];
            AdresseLivraison: components["schemas"]["AdresseResponse"];
            /**
             * Format: float
             * @description Le pourcentage de la remise au document.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise au document.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise au document.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge au document.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge au document.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge au document.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
            /**
             * Format: date
             * @description La date de réalisation de la prestation.
             */
            Realisation: string;
            /**
             * Format: date
             * @description La date de blocage.
             */
            Blocage: string | null;
            /**
             * Format: date
             * @description La date d'échéance.
             */
            Echeance: string | null;
            Client: components["schemas"]["ClientResponse"];
        };
        /** FamilleArticleResponse */
        FamilleArticleResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le libellé. */
            Libelle: string;
            /** @description Le compte comptable. */
            CompteComptable: string;
        };
        /** FournisseurResponse */
        FournisseurResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            TypeFournisseur: components["schemas"]["TypeFournisseur"];
            /** @description La désignation. */
            Designation: string;
            Adresse: components["schemas"]["AdresseResponse"];
            /** @description Le mail. */
            Mail: string | null;
            /** @description Le numéro de téléphone. */
            Telephone: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description La note. */
            Note: string | null;
        };
        /** FournisseurMoralResponse */
        FournisseurMoralResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description La raison sociale. */
            RaisonSociale: string;
            StatutJuridique: components["schemas"]["StatutJuridiqueResponse"];
            Adresse: components["schemas"]["AdresseResponse"];
            /** @description Le mail. */
            Mail: string | null;
            /** @description Le numéro de téléphone. */
            Telephone: string | null;
            /** @description Le siret. */
            Siret: string | null;
            /** @description Le siren. */
            Siren: string | null;
            /** @description Le code NIC. */
            Nic: string | null;
            /** @description Le numéro de TVA intracommunautaire. */
            NumeroIntracom: string | null;
            /** @description Le code APE (NAF). */
            Ape: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description La note. */
            Note: string | null;
        };
        /** FournisseurPhysiqueResponse */
        FournisseurPhysiqueResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le nom. */
            Nom: string;
            /** @description Le prénom. */
            Prenom: string;
            Civilite: components["schemas"]["CiviliteResponse"];
            Adresse: components["schemas"]["AdresseResponse"];
            /** @description Le mail. */
            Mail: string | null;
            /** @description Le numéro de téléphone. */
            Telephone: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description La note. */
            Note: string | null;
        };
        /** GroupeResponse */
        GroupeResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le libellé. */
            Libelle: string;
        };
        /** LigneAcompteResponse */
        LigneAcompteResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La référence. */
            Reference: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description Le libellé. */
            Libelle: string;
            /** @description La description. */
            Description: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite: number;
            /** @description L'unité. */
            Unite: string | null;
            Tva: components["schemas"]["TvaResponse"];
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise à la ligne.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise à la ligne.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise à la ligne.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge à la ligne.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge à la ligne.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge à la ligne.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
        };
        /** LigneAvoirResponse */
        LigneAvoirResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La référence. */
            Reference: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description Le libellé. */
            Libelle: string;
            /** @description La description. */
            Description: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite: number;
            /** @description L'unité. */
            Unite: string | null;
            Tva: components["schemas"]["TvaResponse"];
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise à la ligne.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise à la ligne.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise à la ligne.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge à la ligne.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge à la ligne.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge à la ligne.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
        };
        /** LigneDevisResponse */
        LigneDevisResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La référence. */
            Reference: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description Le libellé. */
            Libelle: string;
            /** @description La description. */
            Description: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite: number;
            /** @description L'unité. */
            Unite: string | null;
            Tva: components["schemas"]["TvaResponse"];
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise à la ligne.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise à la ligne.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise à la ligne.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge à la ligne.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge à la ligne.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge à la ligne.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
        };
        /** LigneFactureCommercialeResponse */
        LigneFactureCommercialeResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            CodeDevise: components["schemas"]["CodeDevise"];
            /** @description Le mode de saisie (HT ou TTC). */
            ModeTtc: boolean;
            /** @description La référence. */
            Reference: string | null;
            /** @description Le compte comptable. */
            CompteComptable: string;
            /** @description Le libellé. */
            Libelle: string;
            /** @description La description. */
            Description: string | null;
            /**
             * Format: float
             * @description La quantité.
             */
            Quantite: number;
            /** @description L'unité. */
            Unite: string | null;
            Tva: components["schemas"]["TvaResponse"];
            /**
             * Format: float
             * @description Le prix unitaire HT.
             */
            PrixUnitaireHt: number;
            /**
             * Format: float
             * @description Le prix unitaire TTC.
             */
            PrixUnitaireTtc: number;
            /**
             * Format: float
             * @description Le pourcentage de la remise à la ligne.
             */
            PourcentageRemise: number | null;
            /**
             * Format: float
             * @description Le montant HT de la remise à la ligne.
             */
            MontantRemiseHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la remise à la ligne.
             */
            MontantRemiseTtc: number | null;
            /**
             * Format: float
             * @description Le pourcentage de la charge à la ligne.
             */
            PourcentageCharge: number | null;
            /**
             * Format: float
             * @description Le montant HT de la charge à la ligne.
             */
            MontantChargeHt: number | null;
            /**
             * Format: float
             * @description Le montant TTC de la charge à la ligne.
             */
            MontantChargeTtc: number | null;
            /**
             * Format: float
             * @description Le prix total net HT.
             */
            PrixTotalNetHt: number;
            /**
             * Format: float
             * @description Le prix total net TVA.
             */
            PrixTotalNetTva: number;
            /**
             * Format: float
             * @description Le prix total net TTC.
             */
            PrixTotalNetTtc: number;
        };
        /** StatutJuridiqueResponse */
        StatutJuridiqueResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le libellé. */
            Libelle: string;
            /** @description L'abréviation. */
            Abreviation: string;
        };
        /** TvaResponse */
        TvaResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le libellé. */
            Libelle: string;
            CodeTva: components["schemas"]["CodeTva"];
            /**
             * Format: float
             * @description Le taux.
             */
            Taux: number;
            /**
             * Format: float
             * @description Le pourcentage.
             */
            Pourcentage: number;
        };
        /** UniteResponse */
        UniteResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le libellé. */
            Libelle: string;
            /** @description Le symbole. */
            Symbole: string;
        };
        /** UtilisateurResponse */
        UtilisateurResponse: components["schemas"]["IdWrapper"] & components["schemas"]["HorodatageWrapper"] & {
            /** @description Le nom. */
            Nom: string;
            /** @description Le prénom. */
            Prenom: string;
            Civilite: components["schemas"]["CiviliteResponse"];
            Adresse: components["schemas"]["AdresseResponse"];
            /** @description Le mail. */
            Mail: string | null;
            /** @description Le numéro de téléphone. */
            Telephone: string | null;
            /** @description L'identifiant GererMesAffaires. */
            IdGererMesAffaires: string | null;
            /**
             * Format: email
             * @description L'identifiant de connexion.
             */
            Identifiant: string | null;
            /** @description Le mot de passe de connexion hashé avec l'algorithme SHA-256. */
            MotDePasse: string;
            /** @description La double authentification (MFA). */
            DoubleAuth: string | null;
            Permission: components["schemas"]["Permission"];
            MethodeConnexion: components["schemas"]["MethodeConnexion"];
            /**
             * Format: date-time
             * @description La date et l'heure de dernière connexion à la norme ISO 8601.
             */
            DerniereConnexion: string | null;
        };
    };
    responses: {
        /** @description Une configuration */
        Config: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ConfigWrapper"];
            };
        };
        /** @description Un fichier */
        Fichier: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FichierWrapper"];
            };
        };
        /** @description Un identifiant unique */
        Id: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["IdWrapper"];
            };
        };
        /** @description Un ping */
        Ping: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["PingWrapper"];
            };
        };
        /** @description Un token */
        Token: {
            headers: {
                "Set-Cookie": components["headers"]["Set-Cookie"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TokenWrapper"];
            };
        };
        /** @description Un token GererMesAffaires */
        TokenGererMesAffaires: {
            headers: {
                "Set-Cookie": components["headers"]["Set-Cookie"];
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TokenGererMesAffairesWrapper"];
            };
        };
        /** @description Une version */
        Version: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["VersionWrapper"];
            };
        };
        /** @description Un acompte */
        Acompte: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AcompteResponse"];
            };
        };
        /** @description Un acompte */
        AcompteAvecClient: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AcompteAvecClientResponse"];
            };
        };
        /** @description Un article */
        Article: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ArticleResponse"];
            };
        };
        /** @description Un article */
        ArticleAvecFamilleArticle: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ArticleAvecFamilleArticleResponse"];
            };
        };
        /** @description Un article produit */
        ArticleProduit: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ArticleProduitResponse"];
            };
        };
        /** @description Un article service */
        ArticleService: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ArticleServiceResponse"];
            };
        };
        /** @description Un avoir */
        Avoir: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AvoirResponse"];
            };
        };
        /** @description Un avoir */
        AvoirAvecClient: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["AvoirAvecClientResponse"];
            };
        };
        /** @description Une civilité */
        Civilite: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["CiviliteResponse"];
            };
        };
        /** @description Un client */
        Client: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientResponse"];
            };
        };
        /** @description Un client moral */
        ClientMoral: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientMoralResponse"];
            };
        };
        /** @description Un client physique */
        ClientPhysique: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ClientPhysiqueResponse"];
            };
        };
        /** @description Un contact */
        Contact: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ContactResponse"];
            };
        };
        /** @description Un devis */
        Devis: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DevisResponse"];
            };
        };
        /** @description Un devis */
        DevisAvecClient: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DevisAvecClientResponse"];
            };
        };
        /** @description Un dossier */
        Dossier: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["DossierResponse"];
            };
        };
        /** @description Une facture commerciale */
        FactureCommerciale: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FactureCommercialeResponse"];
            };
        };
        /** @description Une facture commerciale */
        FactureCommercialeAvecClient: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FactureCommercialeAvecClientResponse"];
            };
        };
        /** @description Une famille d'articles */
        FamilleArticle: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FamilleArticleResponse"];
            };
        };
        /** @description Un fournisseur */
        Fournisseur: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FournisseurResponse"];
            };
        };
        /** @description Un fournisseur moral */
        FournisseurMoral: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FournisseurMoralResponse"];
            };
        };
        /** @description Un fournisseur physique */
        FournisseurPhysique: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["FournisseurPhysiqueResponse"];
            };
        };
        /** @description Un groupe */
        Groupe: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["GroupeResponse"];
            };
        };
        /** @description Une ligne d'acompte */
        LigneAcompte: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["LigneAcompteResponse"];
            };
        };
        /** @description Une ligne d'avoir */
        LigneAvoir: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["LigneAvoirResponse"];
            };
        };
        /** @description Une ligne de devis */
        LigneDevis: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["LigneDevisResponse"];
            };
        };
        /** @description Une ligne de facture commerciale */
        LigneFactureCommerciale: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["LigneFactureCommercialeResponse"];
            };
        };
        /** @description Un statut juridique */
        StatutJuridique: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["StatutJuridiqueResponse"];
            };
        };
        /** @description Une TVA */
        Tva: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["TvaResponse"];
            };
        };
        /** @description Une unité */
        Unite: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["UniteResponse"];
            };
        };
        /** @description Un utilisateur */
        Utilisateur: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["UtilisateurResponse"];
            };
        };
        /** @description Un tableau d'acomptes */
        AcompteArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["AcompteResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau d'acomptes */
        AcompteAvecClientArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["AcompteAvecClientResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau d'articles */
        ArticleArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["ArticleResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau d'articles */
        ArticleAvecFamilleArticleArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["ArticleAvecFamilleArticleResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau d'articles produits */
        ArticleProduitArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["ArticleProduitResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau d'articles services */
        ArticleServiceArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["ArticleServiceResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau d'avoirs */
        AvoirArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["AvoirResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau d'avoirs */
        AvoirAvecClientArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["AvoirAvecClientResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de civilités */
        CiviliteArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["CiviliteResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de clients */
        ClientArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["ClientResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de clients moraux */
        ClientMoralArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["ClientMoralResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de clients physiques */
        ClientPhysiqueArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["ClientPhysiqueResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de contacts */
        ContactArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["ContactResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de devis */
        DevisArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["DevisResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de devis */
        DevisAvecClientArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["DevisAvecClientResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de dossiers */
        DossierArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["DossierResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de factures commerciales */
        FactureCommercialeArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["FactureCommercialeResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de factures commerciales */
        FactureCommercialeAvecClientArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["FactureCommercialeAvecClientResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de familles d'articles */
        FamilleArticleArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["FamilleArticleResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de fournisseurs */
        FournisseurArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["FournisseurResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de fournisseurs moraux */
        FournisseurMoralArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["FournisseurMoralResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de fournisseurs physiques */
        FournisseurPhysiqueArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["FournisseurPhysiqueResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de groupes */
        GroupeArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["GroupeResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de lignes d'acompte */
        LigneAcompteArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["LigneAcompteResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de lignes d'avoir */
        LigneAvoirArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["LigneAvoirResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de lignes de devis */
        LigneDevisArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["LigneDevisResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de lignes de facture commerciale */
        LigneFactureCommercialeArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["LigneFactureCommercialeResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de statuts juridiques */
        StatutJuridiqueArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["StatutJuridiqueResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau de TVA */
        TvaArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["TvaResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Un tableau d'unités */
        UniteArray: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": {
                    Info: components["schemas"]["UniteResponse"][];
                    Extra: components["schemas"]["ExtraWrapper"];
                };
            };
        };
        /** @description Bad Request */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErreurWrapper"];
            };
        };
        /** @description Unauthorized */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErreurWrapper"];
            };
        };
        /** @description Forbidden */
        Forbidden: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErreurWrapper"];
            };
        };
        /** @description Not Found */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErreurWrapper"];
            };
        };
        /** @description Not Acceptable */
        NotAcceptable: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErreurWrapper"];
            };
        };
        /** @description Internal Server Error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErreurWrapper"];
            };
        };
        /** @description Not Implemented */
        NotImplemented: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErreurWrapper"];
            };
        };
        /** @description Service Unavailable */
        ServiceUnavailable: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["ErreurWrapper"];
            };
        };
    };
    parameters: {
        /** @description La clé du dernier résultat à parcourir. */
        "Pagination.Key": number;
        /** @description Le numéro de la page à obtenir. */
        "Pagination.Page": number;
        /** @description Le nombre maximum de résultats à obtenir. */
        "Pagination.Limit": number;
        /** @description Le tri des résultats est effectué dans l'ordre décroissant. */
        "Pagination.Reverse": boolean;
        /** @description L'expression à rechercher. */
        Query: string;
        /** @description L'identifiant de la civilité à manipuler. */
        IdCivilite: number;
        /** @description L'identifiant du statut juridique à manipuler. */
        IdStatutJuridique: number;
        /** @description L'identifiant de la TVA à manipuler. */
        IdTva: number;
        /** @description L'identifiant du dossier à manipuler. */
        IdDossier: number;
        /** @description L'identifiant du groupe à manipuler. */
        IdGroupe: number;
        /** @description L'identifiant du client à manipuler. */
        IdClient: number;
        /** @description L'identifiant du client moral à manipuler. */
        IdClientMoral: number;
        /** @description L'identifiant du client physique à manipuler. */
        IdClientPhysique: number;
        /** @description L'identifiant du contact à manipuler. */
        IdContact: number;
        /** @description L'identifiant du fournisseur à manipuler. */
        IdFournisseur: number;
        /** @description L'identifiant du fournisseur moral à manipuler. */
        IdFournisseurMoral: number;
        /** @description L'identifiant du fournisseur physique à manipuler. */
        IdFournisseurPhysique: number;
        /** @description L'identifiant du devis à manipuler. */
        IdDevis: number;
        /** @description L'identifiant de la facture commerciale à manipuler. */
        IdFactureCommerciale: number;
        /** @description L'identifiant de l'acompte à manipuler. */
        IdAcompte: number;
        /** @description L'identifiant de l'avoir à manipuler. */
        IdAvoir: number;
        /** @description L'identifiant de la ligne de devis à manipuler. */
        IdLigneDevis: number;
        /** @description L'identifiant de la ligne de facture commerciale à manipuler. */
        IdLigneFactureCommerciale: number;
        /** @description L'identifiant de la ligne d'acompte à manipuler. */
        IdLigneAcompte: number;
        /** @description L'identifiant de la ligne d'avoir à manipuler. */
        IdLigneAvoir: number;
        /** @description L'identifiant de la famille d'articles à manipuler. */
        IdFamilleArticle: number;
        /** @description L'identifiant de l'article à manipuler. */
        IdArticle: number;
        /** @description L'identifiant de l'article produit à manipuler. */
        IdArticleProduit: number;
        /** @description L'identifiant de l'article service à manipuler. */
        IdArticleService: number;
        /** @description L'identifiant de l'unité à manipuler. */
        IdUnite: number;
        /** @description L'identifiant du fichier de log à manipuler. */
        IdLog: number;
    };
    requestBodies: {
        Auth: {
            content: {
                /** @example {
                 *       "Identifiant": "julien.benac@ogea12.com",
                 *       "MotDePasse": "e3aae9a8650c9da7a42b9b0c93439dd2b9d0d6557904f36b2d86230d1b4d1303"
                 *     } */
                "application/json": components["schemas"]["AuthWrapper"];
            };
        };
        AuthGererMesAffaires: {
            content: {
                /** @example {
                 *       "AccessToken": "8c837a69158a6bb061de6b4f7bc8ea2c98873ba6",
                 *       "RefreshToken": "ed26803ece98e52b9cfe4e8efbb2b50507309698"
                 *     } */
                "application/json": components["schemas"]["AuthGererMesAffairesWrapper"];
            };
        };
        DoubleAuth: {
            content: {
                /** @example {
                 *       "Code": "782315"
                 *     } */
                "application/json": components["schemas"]["DoubleAuthWrapper"];
            };
        };
        Ids: {
            content: {
                "application/json": components["schemas"]["IdsWrapper"];
            };
        };
        Acompte: {
            content: {
                "application/json": components["schemas"]["AcompteRequest"];
            };
        };
        ArticleProduit: {
            content: {
                "application/json": components["schemas"]["ArticleProduitRequest"];
            };
        };
        ArticleService: {
            content: {
                "application/json": components["schemas"]["ArticleServiceRequest"];
            };
        };
        Avoir: {
            content: {
                "application/json": components["schemas"]["AvoirRequest"];
            };
        };
        Civilite: {
            content: {
                "application/json": components["schemas"]["CiviliteRequest"];
            };
        };
        ClientMoral: {
            content: {
                "application/json": components["schemas"]["ClientMoralRequest"];
            };
        };
        ClientPhysique: {
            content: {
                "application/json": components["schemas"]["ClientPhysiqueRequest"];
            };
        };
        Contact: {
            content: {
                "application/json": components["schemas"]["ContactRequest"];
            };
        };
        Devis: {
            content: {
                "application/json": components["schemas"]["DevisRequest"];
            };
        };
        FactureCommerciale: {
            content: {
                "application/json": components["schemas"]["FactureCommercialeRequest"];
            };
        };
        FamilleArticle: {
            content: {
                "application/json": components["schemas"]["FamilleArticleRequest"];
            };
        };
        FournisseurMoral: {
            content: {
                "application/json": components["schemas"]["FournisseurMoralRequest"];
            };
        };
        FournisseurPhysique: {
            content: {
                "application/json": components["schemas"]["FournisseurPhysiqueRequest"];
            };
        };
        LigneAcompte: {
            content: {
                "application/json": components["schemas"]["LigneAcompteRequest"];
            };
        };
        LigneAvoir: {
            content: {
                "application/json": components["schemas"]["LigneAvoirRequest"];
            };
        };
        LigneDevis: {
            content: {
                "application/json": components["schemas"]["LigneDevisRequest"];
            };
        };
        LigneFactureCommerciale: {
            content: {
                "application/json": components["schemas"]["LigneFactureCommercialeRequest"];
            };
        };
        StatutJuridique: {
            content: {
                "application/json": components["schemas"]["StatutJuridiqueRequest"];
            };
        };
        Tva: {
            content: {
                "application/json": components["schemas"]["TvaRequest"];
            };
        };
        Unite: {
            content: {
                "application/json": components["schemas"]["UniteRequest"];
            };
        };
        Utilisateur: {
            content: {
                "application/json": components["schemas"]["UtilisateurRequest"];
            };
        };
    };
    headers: {
        /** @description Voir la documentation de l'entête [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie). */
        "Set-Cookie": string;
    };
    pathItems: never;
}
export type SchemaAcces = components['schemas']['Acces'];
export type SchemaCodeDevise = components['schemas']['CodeDevise'];
export type SchemaCodePays = components['schemas']['CodePays'];
export type SchemaCodeTva = components['schemas']['CodeTva'];
export type SchemaTypeArticle = components['schemas']['TypeArticle'];
export type SchemaTypeClient = components['schemas']['TypeClient'];
export type SchemaTypeFournisseur = components['schemas']['TypeFournisseur'];
export type SchemaTypeFacture = components['schemas']['TypeFacture'];
export type SchemaMethodeConnexion = components['schemas']['MethodeConnexion'];
export type SchemaPermission = components['schemas']['Permission'];
export type SchemaAuthWrapper = components['schemas']['AuthWrapper'];
export type SchemaAuthGererMesAffairesWrapper = components['schemas']['AuthGererMesAffairesWrapper'];
export type SchemaDoubleAuthWrapper = components['schemas']['DoubleAuthWrapper'];
export type SchemaBaseDeDonneesWrapper = components['schemas']['BaseDeDonneesWrapper'];
export type SchemaConfigWrapper = components['schemas']['ConfigWrapper'];
export type SchemaErreurWrapper = components['schemas']['ErreurWrapper'];
export type SchemaExtraWrapper = components['schemas']['ExtraWrapper'];
export type SchemaFichierWrapper = components['schemas']['FichierWrapper'];
export type SchemaHorodatageWrapper = components['schemas']['HorodatageWrapper'];
export type SchemaIdsWrapper = components['schemas']['IdsWrapper'];
export type SchemaIdWrapper = components['schemas']['IdWrapper'];
export type SchemaPingWrapper = components['schemas']['PingWrapper'];
export type SchemaProxyWrapper = components['schemas']['ProxyWrapper'];
export type SchemaTokenWrapper = components['schemas']['TokenWrapper'];
export type SchemaTokenGererMesAffairesWrapper = components['schemas']['TokenGererMesAffairesWrapper'];
export type SchemaVersionWrapper = components['schemas']['VersionWrapper'];
export type SchemaAcompteRequest = components['schemas']['AcompteRequest'];
export type SchemaAdresseRequest = components['schemas']['AdresseRequest'];
export type SchemaArticleProduitRequest = components['schemas']['ArticleProduitRequest'];
export type SchemaArticleServiceRequest = components['schemas']['ArticleServiceRequest'];
export type SchemaAvoirRequest = components['schemas']['AvoirRequest'];
export type SchemaCiviliteRequest = components['schemas']['CiviliteRequest'];
export type SchemaClientMoralRequest = components['schemas']['ClientMoralRequest'];
export type SchemaClientPhysiqueRequest = components['schemas']['ClientPhysiqueRequest'];
export type SchemaContactRequest = components['schemas']['ContactRequest'];
export type SchemaDevisRequest = components['schemas']['DevisRequest'];
export type SchemaFactureCommercialeRequest = components['schemas']['FactureCommercialeRequest'];
export type SchemaFamilleArticleRequest = components['schemas']['FamilleArticleRequest'];
export type SchemaFournisseurMoralRequest = components['schemas']['FournisseurMoralRequest'];
export type SchemaFournisseurPhysiqueRequest = components['schemas']['FournisseurPhysiqueRequest'];
export type SchemaLigneAcompteRequest = components['schemas']['LigneAcompteRequest'];
export type SchemaLigneAvoirRequest = components['schemas']['LigneAvoirRequest'];
export type SchemaLigneDevisRequest = components['schemas']['LigneDevisRequest'];
export type SchemaLigneFactureCommercialeRequest = components['schemas']['LigneFactureCommercialeRequest'];
export type SchemaStatutJuridiqueRequest = components['schemas']['StatutJuridiqueRequest'];
export type SchemaTvaRequest = components['schemas']['TvaRequest'];
export type SchemaUniteRequest = components['schemas']['UniteRequest'];
export type SchemaUtilisateurRequest = components['schemas']['UtilisateurRequest'];
export type SchemaAcompteResponse = components['schemas']['AcompteResponse'];
export type SchemaAcompteAvecClientResponse = components['schemas']['AcompteAvecClientResponse'];
export type SchemaAdresseResponse = components['schemas']['AdresseResponse'];
export type SchemaArticleResponse = components['schemas']['ArticleResponse'];
export type SchemaArticleAvecFamilleArticleResponse = components['schemas']['ArticleAvecFamilleArticleResponse'];
export type SchemaArticleProduitResponse = components['schemas']['ArticleProduitResponse'];
export type SchemaArticleServiceResponse = components['schemas']['ArticleServiceResponse'];
export type SchemaAvoirResponse = components['schemas']['AvoirResponse'];
export type SchemaAvoirAvecClientResponse = components['schemas']['AvoirAvecClientResponse'];
export type SchemaCiviliteResponse = components['schemas']['CiviliteResponse'];
export type SchemaClientResponse = components['schemas']['ClientResponse'];
export type SchemaClientMoralResponse = components['schemas']['ClientMoralResponse'];
export type SchemaClientPhysiqueResponse = components['schemas']['ClientPhysiqueResponse'];
export type SchemaContactResponse = components['schemas']['ContactResponse'];
export type SchemaDevisResponse = components['schemas']['DevisResponse'];
export type SchemaDevisAvecClientResponse = components['schemas']['DevisAvecClientResponse'];
export type SchemaDossierResponse = components['schemas']['DossierResponse'];
export type SchemaFactureCommercialeResponse = components['schemas']['FactureCommercialeResponse'];
export type SchemaFactureCommercialeAvecClientResponse = components['schemas']['FactureCommercialeAvecClientResponse'];
export type SchemaFamilleArticleResponse = components['schemas']['FamilleArticleResponse'];
export type SchemaFournisseurResponse = components['schemas']['FournisseurResponse'];
export type SchemaFournisseurMoralResponse = components['schemas']['FournisseurMoralResponse'];
export type SchemaFournisseurPhysiqueResponse = components['schemas']['FournisseurPhysiqueResponse'];
export type SchemaGroupeResponse = components['schemas']['GroupeResponse'];
export type SchemaLigneAcompteResponse = components['schemas']['LigneAcompteResponse'];
export type SchemaLigneAvoirResponse = components['schemas']['LigneAvoirResponse'];
export type SchemaLigneDevisResponse = components['schemas']['LigneDevisResponse'];
export type SchemaLigneFactureCommercialeResponse = components['schemas']['LigneFactureCommercialeResponse'];
export type SchemaStatutJuridiqueResponse = components['schemas']['StatutJuridiqueResponse'];
export type SchemaTvaResponse = components['schemas']['TvaResponse'];
export type SchemaUniteResponse = components['schemas']['UniteResponse'];
export type SchemaUtilisateurResponse = components['schemas']['UtilisateurResponse'];
export type ResponseConfig = components['responses']['Config'];
export type ResponseFichier = components['responses']['Fichier'];
export type ResponseId = components['responses']['Id'];
export type ResponsePing = components['responses']['Ping'];
export type ResponseToken = components['responses']['Token'];
export type ResponseTokenGererMesAffaires = components['responses']['TokenGererMesAffaires'];
export type ResponseVersion = components['responses']['Version'];
export type ResponseAcompte = components['responses']['Acompte'];
export type ResponseAcompteAvecClient = components['responses']['AcompteAvecClient'];
export type ResponseArticle = components['responses']['Article'];
export type ResponseArticleAvecFamilleArticle = components['responses']['ArticleAvecFamilleArticle'];
export type ResponseArticleProduit = components['responses']['ArticleProduit'];
export type ResponseArticleService = components['responses']['ArticleService'];
export type ResponseAvoir = components['responses']['Avoir'];
export type ResponseAvoirAvecClient = components['responses']['AvoirAvecClient'];
export type ResponseCivilite = components['responses']['Civilite'];
export type ResponseClient = components['responses']['Client'];
export type ResponseClientMoral = components['responses']['ClientMoral'];
export type ResponseClientPhysique = components['responses']['ClientPhysique'];
export type ResponseContact = components['responses']['Contact'];
export type ResponseDevis = components['responses']['Devis'];
export type ResponseDevisAvecClient = components['responses']['DevisAvecClient'];
export type ResponseDossier = components['responses']['Dossier'];
export type ResponseFactureCommerciale = components['responses']['FactureCommerciale'];
export type ResponseFactureCommercialeAvecClient = components['responses']['FactureCommercialeAvecClient'];
export type ResponseFamilleArticle = components['responses']['FamilleArticle'];
export type ResponseFournisseur = components['responses']['Fournisseur'];
export type ResponseFournisseurMoral = components['responses']['FournisseurMoral'];
export type ResponseFournisseurPhysique = components['responses']['FournisseurPhysique'];
export type ResponseGroupe = components['responses']['Groupe'];
export type ResponseLigneAcompte = components['responses']['LigneAcompte'];
export type ResponseLigneAvoir = components['responses']['LigneAvoir'];
export type ResponseLigneDevis = components['responses']['LigneDevis'];
export type ResponseLigneFactureCommerciale = components['responses']['LigneFactureCommerciale'];
export type ResponseStatutJuridique = components['responses']['StatutJuridique'];
export type ResponseTva = components['responses']['Tva'];
export type ResponseUnite = components['responses']['Unite'];
export type ResponseUtilisateur = components['responses']['Utilisateur'];
export type ResponseAcompteArray = components['responses']['AcompteArray'];
export type ResponseAcompteAvecClientArray = components['responses']['AcompteAvecClientArray'];
export type ResponseArticleArray = components['responses']['ArticleArray'];
export type ResponseArticleAvecFamilleArticleArray = components['responses']['ArticleAvecFamilleArticleArray'];
export type ResponseArticleProduitArray = components['responses']['ArticleProduitArray'];
export type ResponseArticleServiceArray = components['responses']['ArticleServiceArray'];
export type ResponseAvoirArray = components['responses']['AvoirArray'];
export type ResponseAvoirAvecClientArray = components['responses']['AvoirAvecClientArray'];
export type ResponseCiviliteArray = components['responses']['CiviliteArray'];
export type ResponseClientArray = components['responses']['ClientArray'];
export type ResponseClientMoralArray = components['responses']['ClientMoralArray'];
export type ResponseClientPhysiqueArray = components['responses']['ClientPhysiqueArray'];
export type ResponseContactArray = components['responses']['ContactArray'];
export type ResponseDevisArray = components['responses']['DevisArray'];
export type ResponseDevisAvecClientArray = components['responses']['DevisAvecClientArray'];
export type ResponseDossierArray = components['responses']['DossierArray'];
export type ResponseFactureCommercialeArray = components['responses']['FactureCommercialeArray'];
export type ResponseFactureCommercialeAvecClientArray = components['responses']['FactureCommercialeAvecClientArray'];
export type ResponseFamilleArticleArray = components['responses']['FamilleArticleArray'];
export type ResponseFournisseurArray = components['responses']['FournisseurArray'];
export type ResponseFournisseurMoralArray = components['responses']['FournisseurMoralArray'];
export type ResponseFournisseurPhysiqueArray = components['responses']['FournisseurPhysiqueArray'];
export type ResponseGroupeArray = components['responses']['GroupeArray'];
export type ResponseLigneAcompteArray = components['responses']['LigneAcompteArray'];
export type ResponseLigneAvoirArray = components['responses']['LigneAvoirArray'];
export type ResponseLigneDevisArray = components['responses']['LigneDevisArray'];
export type ResponseLigneFactureCommercialeArray = components['responses']['LigneFactureCommercialeArray'];
export type ResponseStatutJuridiqueArray = components['responses']['StatutJuridiqueArray'];
export type ResponseTvaArray = components['responses']['TvaArray'];
export type ResponseUniteArray = components['responses']['UniteArray'];
export type ResponseBadRequest = components['responses']['BadRequest'];
export type ResponseUnauthorized = components['responses']['Unauthorized'];
export type ResponseForbidden = components['responses']['Forbidden'];
export type ResponseNotFound = components['responses']['NotFound'];
export type ResponseNotAcceptable = components['responses']['NotAcceptable'];
export type ResponseInternalServerError = components['responses']['InternalServerError'];
export type ResponseNotImplemented = components['responses']['NotImplemented'];
export type ResponseServiceUnavailable = components['responses']['ServiceUnavailable'];
export type ParameterPaginationKey = components['parameters']['Pagination.Key'];
export type ParameterPaginationPage = components['parameters']['Pagination.Page'];
export type ParameterPaginationLimit = components['parameters']['Pagination.Limit'];
export type ParameterPaginationReverse = components['parameters']['Pagination.Reverse'];
export type ParameterQuery = components['parameters']['Query'];
export type ParameterIdCivilite = components['parameters']['IdCivilite'];
export type ParameterIdStatutJuridique = components['parameters']['IdStatutJuridique'];
export type ParameterIdTva = components['parameters']['IdTva'];
export type ParameterIdDossier = components['parameters']['IdDossier'];
export type ParameterIdGroupe = components['parameters']['IdGroupe'];
export type ParameterIdClient = components['parameters']['IdClient'];
export type ParameterIdClientMoral = components['parameters']['IdClientMoral'];
export type ParameterIdClientPhysique = components['parameters']['IdClientPhysique'];
export type ParameterIdContact = components['parameters']['IdContact'];
export type ParameterIdFournisseur = components['parameters']['IdFournisseur'];
export type ParameterIdFournisseurMoral = components['parameters']['IdFournisseurMoral'];
export type ParameterIdFournisseurPhysique = components['parameters']['IdFournisseurPhysique'];
export type ParameterIdDevis = components['parameters']['IdDevis'];
export type ParameterIdFactureCommerciale = components['parameters']['IdFactureCommerciale'];
export type ParameterIdAcompte = components['parameters']['IdAcompte'];
export type ParameterIdAvoir = components['parameters']['IdAvoir'];
export type ParameterIdLigneDevis = components['parameters']['IdLigneDevis'];
export type ParameterIdLigneFactureCommerciale = components['parameters']['IdLigneFactureCommerciale'];
export type ParameterIdLigneAcompte = components['parameters']['IdLigneAcompte'];
export type ParameterIdLigneAvoir = components['parameters']['IdLigneAvoir'];
export type ParameterIdFamilleArticle = components['parameters']['IdFamilleArticle'];
export type ParameterIdArticle = components['parameters']['IdArticle'];
export type ParameterIdArticleProduit = components['parameters']['IdArticleProduit'];
export type ParameterIdArticleService = components['parameters']['IdArticleService'];
export type ParameterIdUnite = components['parameters']['IdUnite'];
export type ParameterIdLog = components['parameters']['IdLog'];
export type RequestBodyAuth = components['requestBodies']['Auth'];
export type RequestBodyAuthGererMesAffaires = components['requestBodies']['AuthGererMesAffaires'];
export type RequestBodyDoubleAuth = components['requestBodies']['DoubleAuth'];
export type RequestBodyIds = components['requestBodies']['Ids'];
export type RequestBodyAcompte = components['requestBodies']['Acompte'];
export type RequestBodyArticleProduit = components['requestBodies']['ArticleProduit'];
export type RequestBodyArticleService = components['requestBodies']['ArticleService'];
export type RequestBodyAvoir = components['requestBodies']['Avoir'];
export type RequestBodyCivilite = components['requestBodies']['Civilite'];
export type RequestBodyClientMoral = components['requestBodies']['ClientMoral'];
export type RequestBodyClientPhysique = components['requestBodies']['ClientPhysique'];
export type RequestBodyContact = components['requestBodies']['Contact'];
export type RequestBodyDevis = components['requestBodies']['Devis'];
export type RequestBodyFactureCommerciale = components['requestBodies']['FactureCommerciale'];
export type RequestBodyFamilleArticle = components['requestBodies']['FamilleArticle'];
export type RequestBodyFournisseurMoral = components['requestBodies']['FournisseurMoral'];
export type RequestBodyFournisseurPhysique = components['requestBodies']['FournisseurPhysique'];
export type RequestBodyLigneAcompte = components['requestBodies']['LigneAcompte'];
export type RequestBodyLigneAvoir = components['requestBodies']['LigneAvoir'];
export type RequestBodyLigneDevis = components['requestBodies']['LigneDevis'];
export type RequestBodyLigneFactureCommerciale = components['requestBodies']['LigneFactureCommerciale'];
export type RequestBodyStatutJuridique = components['requestBodies']['StatutJuridique'];
export type RequestBodyTva = components['requestBodies']['Tva'];
export type RequestBodyUnite = components['requestBodies']['Unite'];
export type RequestBodyUtilisateur = components['requestBodies']['Utilisateur'];
export type HeaderSetCookie = components['headers']['Set-Cookie'];
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
